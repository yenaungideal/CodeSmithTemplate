<%@ CodeTemplate Language="C#" TargetLanguage="T-SQL" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database table schema." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the stored procedures should be based on." %>
<%@ Property Name="IncludeDrop" Type="System.Boolean" Default="True" Category="Options" Description="If true drop statements will be generated to drop existing stored procedures." %>
<%@ Property Name="IncludeInsert" Type="System.Boolean" Default="True" Category="Options" Description="If true insert statements will be generated." %>
<%@ Property Name="IncludeUpdate" Type="System.Boolean" Default="True" Category="Options" Description="If true update statements will be generated." %>
<%@ Property Name="IncludeDelete" Type="System.Boolean" Default="True" Category="Options" Description="If true delete statements will be generated." %>
<%@ Property Name="IncludeGet" Type="System.Boolean" Default="True" Category="Options" Description="If true get statements will be generated." %>
<%@ Property Name="IncludeGetList" Type="System.Boolean" Default="True" Category="Options" Description="If true getlist statements will be generated." %>
<%@ Property Name="InsertPrefix" Type="System.String" Default="Insert" Category="Style" Description="Prefix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdatePrefix" Type="System.String" Default="Update" Category="Style" Description="Prefix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeletePrefix" Type="System.String" Default="Delete" Category="Style" Description="Prefix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectPrefix" Type="System.String" Default="Get" Category="Style" Description="Prefix to use for all generated SELECT stored procedures." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<% if (IncludeDrop) { %>
	<% if (IncludeDelete) { %>
/****** Object:  Stored Procedure dbo.Delete<%= SourceTable.Name %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Delete<%= SourceTable.Name %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Delete<%= SourceTable.Name %>]
GO

	<% } %>
	<% if (IncludeGet) { %>
/****** Object:  Stored Procedure dbo.Get<%= SourceTable.Name %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get<%= SourceTable.Name %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get<%= SourceTable.Name %>]
GO

	<% } %>
	<% if (IncludeGetList) { %>
/****** Object:  Stored Procedure dbo.Get<%= SourceTable.Name %>List    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Get<%= SourceTable.Name %>List]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Get<%= SourceTable.Name %>List]
GO

	<% } %>
	<% if (IncludeInsert) { %>
/****** Object:  Stored Procedure dbo.Insert<%= SourceTable.Name %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Insert<%= SourceTable.Name %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Insert<%= SourceTable.Name %>]
GO

	<% } %>
	<% if (IncludeUpdate) { %>
/****** Object:  Stored Procedure dbo.Update<%= SourceTable.Name %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Update<%= SourceTable.Name %>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[Update<%= SourceTable.Name %>]
GO

	<% } %>
<% } %>
<% if (IncludeDelete) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
------------------------------------------------------------------------------------------------------------------------
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE dbo.<%= DeletePrefix %><%= SourceTable.Name %>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
AS

DELETE FROM [<%= SourceTable.Name %>]
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<% if (IncludeGet) { %>
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO
------------------------------------------------------------------------------------------------------------------------
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE dbo.<%= SelectPrefix %><%= SourceTable.Name %>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM
	[<%= SourceTable.Name %>]
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<% if (IncludeGetList) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
------------------------------------------------------------------------------------------------------------------------
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE dbo.<%= SelectPrefix %><%= SourceTable.Name %>List
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM
	[<%= SourceTable.Name %>]

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
<% if (IncludeInsert) { %>
------------------------------------------------------------------------------------------------------------------------
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------

<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1 && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32)) {
	ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
%>
CREATE PROCEDURE dbo.<%= InsertPrefix %><%= SourceTable.Name %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.NonPrimaryKeyColumns[i]) %>,
	<% } %>
	<%= GetSqlParameterStatement(primaryKey, true) %>
AS

<% if (primaryKey.DataType == DbType.Guid) { %>
SET @<%= primaryKey.Name %> = NEWID()

<% } %>
INSERT INTO [<%= SourceTable.Name %>] (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	[<%= primaryKey.Name %>],
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>]<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	@<%= primaryKey.Name %>,
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	@<%= SourceTable.NonPrimaryKeyColumns[i].Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
)
<% if (primaryKey.DataType == DbType.Int32) { %>

SET @<%= primaryKey.Name %> = @@IDENTITY
<% } %>
<% } else { %>
CREATE PROCEDURE dbo.Insert<%= SourceTable.Name %>
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.Columns[i]) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
AS

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO [<%= SourceTable.Name %>] (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	@<%= SourceTable.Columns[i].Name %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
)
<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<% } %>
<% if (IncludeUpdate) { %>
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
------------------------------------------------------------------------------------------------------------------------
-- Date Created: <%= DateTime.Now.ToLongDateString() %>
-- Created By:   Generated by CodeSmith
------------------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE dbo.<%= UpdatePrefix %><%= SourceTable.Name %>
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.Columns[i]) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %> <% if (SourceTable.Columns[i].Description.Length > 0) { %>-- <%= SourceTable.Columns[i].Description %><% } %>
	<% } %>
AS

UPDATE [<%= SourceTable.Name %>] SET
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = @<%= SourceTable.NonPrimaryKeyColumns[i].Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
<% } %>
<script runat="template">
public string GetSqlParameterStatement(ColumnSchema column)
{
	return GetSqlParameterStatement(column, false);
}

public string GetSqlParameterStatement(ColumnSchema column, bool isOutput)
{
	string param = "@" + column.Name + " " + column.NativeType;
	
	switch (column.DataType)
	{
		case DbType.Decimal:
		{
			param += "(" + column.Precision + ", " + column.Scale + ")";
			break;
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			if (column.Size > 0)
			{
				param += "(" + column.Size + ")";
			}
			break;
		}
	}
	
	if (isOutput)
	{
		param += " OUTPUT";
	}
	
	return param;
}
</script>